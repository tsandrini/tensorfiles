#+NAME: spinorbundle
#+AUTHOR: tsandrini

* 1. About
Secondary windows dualbooted laptop running btrfs based opt-in filesystem.

TODO specs?
* 2. Installation
First things first, I can't read this tty crap

#+begin_src shell
sudo su
setfont ter-132n
#+end_src

Much better, now set up a main root partition on =/dev/sdaX= and a swap
partition on =/dev/sdaY=

#+begin_src shell
cgdisk /dev/sda
#+end_src

then encrypt the main partition using luks and open it

#+begin_src shell
cryptsetup --verify-passphrase -v luksFormat /dev/sdaX
cryptsetup open /dev/sdaX enc
#+end_src

format the partitions and don't forget to *label them*!

#+begin_src shell
mkswap -L swap /dev/sdaY
swapon /dev/disk/by-label/swap
mkfs.btrfs -L root /dev/mapper/enc
cryptsetup config /dev/sdX --label root_crypt
#+end_src

also if your win boot partition =/dev/sdaZ= is not labeled yet, go ahead and
label it

#+begin_src shell
fatlabel /dev/sdaZ boot
#+end_src

Now we can proceed to create btrfs subvolumes. We'll be making a few of them

1. =/mnt/root=: main subvolume, flushed on every boot
2. =/mnt/nix=: subvolume holding =/nix/store= - easily reconstructible, but
   worth caching and thus will be persistent between boots
3. =/mnt/persist=: subvolume holding all of the needed permanent data and main
   mount point for [[https://github.com/nix-community/impermanence][impermanence]]
4. =/mnt/var/log=: low data priority, but worth preserving between boots due
   to possible error logs

/Note/: You may consider also having a =/mnt/home= subvolume preserved between
boots since it's easier to maintain, however, I decided to flush the =/home=
directory between boots as well and recostruct it using =home-manager= so
I am omitting the =/mnt/home= subvolume parts.

#+begin_src shell
mount -t btrfs /dev/mapper/enc /mnt
btrfs su cr /mnt/root
btrfs su cr /mnt/nix
btrfs su cr /mnt/persist
btrfs su cr /mnt/log

btrfs su snapshot -r /mnt/root /mnt/root-blank
umount /mnt
#+end_src

Now we proceed to mount all the previously created subvolumes, feel free
to modify the btrfs mountflags if needed but don't forget to patch
=hardware-configuration.nix= afterwards

#+begin_src shell
mount -o noatime,compress=zstd,subvol=root /dev/mapper/enc /mnt

mkdir -p /mnt/{nix,persist,var/log,boot}
mount -o noatime,compress=zstd,subvol=nix /dev/mapper/enc /mnt/nix
mount -o noatime,compress=zstd,subvol=persist /dev/mapper/enc /mnt/persist
mount -o noatime,compress=zstd,subvol=log /dev/mapper/enc /mnt/var/log

mount /dev/disk/by-label/boot /mnt/boot
#+end_src

/Notenote/: At this stage you should either start an ssh-agent
(=eval `ssh-agent`=) and add the
appropriate keys (=ssh-add /root/.ssh/id_ed25519=) or in case you don't want
to use agenix you should patch the config with your desired way of handling
secrets and default passwords.

Now we can proceed to install the desired =nixosConfiguration= of our flake.

#+begin_src shell
nix-shell -p git nixFlakes pywal
export USER="my_user"
export HOST="spinorbundle"

mkdir -p /mnt/{persist/etc,tmp}
git clone https://github.com/tsandrini/tensorfiles /mnt/persist/etc/tensorfiles
cd /mnt/etc/tensorfiles/nix

# in case you have made any changes to the flake don't forget to add them
# to the git staged cache
# git add *

wal -i var/example-wallpaper.png
TMPDIR="/mnt/tmp" USER=$USER nixos-install --root /mnt --flake .#$HOST
#+end_src

now you should be ready to go and pray!

#+begin_src shell
reboot # hehe
#+end_src
