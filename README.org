#+NAME: dotfiles
#+AUTHOR: tsandrini

* 1. About
Hello my dear explorer! Let's enjoy computing that actually doesn't suck together!

[[./nix/var/showcase_1.png]]
[[./nix/var/showcase_2.png]]
* 2. Software
I use the following software
|--------------+---------------------------+-------------------------------------------------------|
| #            | Tool                      | Comment                                               |
|--------------+---------------------------+-------------------------------------------------------|
| Shell        | [[https://www.zsh.org/][Zsh]] & [[https://ohmyz.sh/][OMZ]] & [[https://github.com/romkatv/powerlevel10k][Powerlevel10k]] | pw10k makes the zsh experience surprisingly pleasant  |
| DM           | [[https://github.com/canonical/lightdm][LightDM]] or [[https://www.x.org/archive/X11R6.8.1/doc/xinit.1.html][xinit]]          |                                                       |
| WM           | [[https://github.com/xmonad/xmonad][xmonad]] & [[https://github.com/jaor/xmobar][xmobar]]           | using anything else rn feels like stone age           |
| Editor       | [[https://github.com/neovim/neovim][nvim]]                      | sorry Moolenaar, ideas great, not the managment tho   |
| IDE          | emacs & [[https://github.com/hlissner/doom-emacs][doom-emacs]]        | (using anything else rn feels like stone age)^2       |
| Terminal     | [[https://github.com/alacritty/alacritty][alacritty]]                 | sorry [[https://st.suckless.org/][st]], I am really liking the rust experience more |
| Browser      | firefox (dev-edition)     | qute is nice but not that secure unfortunately        |
| App launcher | [[https://tools.suckless.org/dmenu/][dmenu]]                     | Rofi has a nice frontend, but is practically unusable |
| Fetch        | [[https://github.com/ssleert/nitch][nitch]]                     | whatsup my fellow nimmers                             |
| File manager | [[https://github.com/gokcehan/lf][lf]]                            | ranger, but actually usable                           |
| News reader  | [[https://newsboat.org/][newsboat]]                  | modern web is barely usable for reading news D:       |
| ls           | [[https://github.com/ogham/exa][exa]]                       | fast, ls-compatible with added features               |
| cat          | [[https://github.com/sharkdp/bat][bat]]                       |                                                       |
| Colors uwu?  | [[https://github.com/dylanaraps/pywal][pywal]]                     | TODO should probably comment more on colors           |
|--------------+---------------------------+-------------------------------------------------------|

** 2.1. Academics [TODO: comment more?]
1. [[https://www.orgroam.com/][org-roam]]: This is the heart of everything that I do, TODOs, daily
   journals, scratchpads, notetaking and personal research wiki. The internal
   wiki is interlinked with zotero entries as well as anki cards.

   + TODOs: [[https://orgmode.org/manual/Agenda-Views.html][org-agenda]]
   + visualization: [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]
   + anki connection: [[https://github.com/louietan/anki-editor][org-anki-editor]]

   [[./nix/var/showcase_org_roam_ui.png]]
2. [[https://www.zotero.org/][zotero]]: This is my backend for all of my bibliography as well as the
   individual =.pdf= files. As of now I keep them up to date between machines
   using [[https://syncthing.net/][syncthing]], but I'll probably set up a personal cloud when I'll
   have spare time.
3. [[https://apps.ankiweb.net/][anki]]: Since I have the memory of worm I try to keep my long-term
   memory of different subjects fresh using flashcards. I sync the cards
   using ankis official cloud.
** 2.2. Secrets
For my day to day passwords I use a locally synced [[https://keepassxc.org/][keepassxc]] encrypted
database and for the NixOS based secrets I use [[https://github.com/ryantm/agenix][agenix]]. I also try to avoid
using any globally available pubkeys and rather tend to use machine specific
ones instead (for obvious reasons).

/Note/: plz no pwn xd, if you see any vulnerabilities please DM me instead,
thanks <3.
* 3. Installation
TODO
* 4. (rough) Roadmap
- [ ] **organization**
  - [ ] finish doc
  - [ ] decouple [[file:nix/roles/base.nix]]
  - [ ] decouple [[file:nix/flake.nix]]
  - [ ] move [[file:nix/]] to be the project root
- [-] **implementation**
  - [ ] syncthing (local version)
  - [ ] syncthing (remote)
  - [ ] searx (remote)
  - [X] newsboat
  - [ ] thunderbird
  - [ ] zotero
  - [ ] anki
  - [ ] emacs
  - [ ] discord
  - [ ] misc? vlc? libre?
- [ ] **machines**
  - [ ] jetbundle
  - [ ] pi
  - [ ] server
* 5. Troubleshooting
** "Write error: disk full" during =nixos-install=
If you get any error of this kind during the installation of this flake
you have most likely run out of =$TMPDIR= space. This is usually due
to =$TMPDIR= being set up as a RAM based tmpfs and thus not having enough
RAM for nix store cache during installation.

The most clean & general solution to this would be to create a minimal
based installation and then run a =nixos-rebuild= (and I still might do that)
but that kind of defeats the purpose of what I am aiming for which would be
to run =nixos-install=, a single command, and end up with a fully prepared
system.

Considering that a quick workaround is to navigate =$TMPDIR= to a different
folder (this might slow the installation process if you redirect it to a
spinning disk tmp filesystem, however, assuming you have a decent bandwidth
is's still just by minutes)

#+begin_src shell
mkdir -p /mnt/tmp
USER=$USER TMPDIR="/mnt/tmp" nixos-install --root /mnt --flake .#$HOST
#+end_src

A different solution in case you have more spare RAM would be to remount
tmpfs, for example

#+begin_src shell
mount -o remount,size=15G /tmp
#+end_src
* 6. References
The whole nix ecosystem is in its foundations a revolutionary piece of
software and once you get the hang of it you feel like you've really
conquered the art of computer wizardry, however, it's so different from
everything that is the current status quo of compsci and thus needs
appropriate extensive documentation/tutorials/etc... which is, however,
currently not the case.

Due to this exact reason I'm leaving here a list of resources/flakes that
helped me to (somewhat) learn the ways of nix (TODO: maybe write more? manual.org?)

+ [[https://nixos.org/guides/nix-pills/][Nix Pills: obligatory pills]]
+ [[https://search.nixos.org/options][NixOS search: this should be your homepage really]]
+ [[https://mipmip.github.io/home-manager-option-search/][Home-Manager opts search: the same search but for home-manager, secondary homepage tbh]]
+ [[https://github.com/hlissner/dotfiles][hlissner/dotfiles: great resource for learning how to appropriately modularize code]]
+ [[https://github.com/notusknot/dotfiles-nix][notusknot/dotfiles-nix: a more straightforward config but with all the needed parts, great introduction to flakes, home-manager]]
+ [[https://nixos.wiki/wiki/Nix_Cookbook][Nix Cookbook: custom scripts, package wrapper scripts]]
+ [[https://github.com/balsoft/nixos-config][balsoft/nixos-config: more modularized but not overly complicated config]]
+ [[https://mt-caret.github.io/blog/posts/2020-06-29-optin-state.html][A really nice blogpost/tutorial on encrypted nixos opt-in system using btrfs]]
+ [[https://github.com/search?q=pkgs.writeShellScriptBin+language%3ANix&type=code&l=Nix][Github code search: thanks to how the nix lang works the code search should be of a huge help, included an example]]
